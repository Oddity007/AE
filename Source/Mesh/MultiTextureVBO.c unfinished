#include "../MultiTextureVBO.h"

typedef struct{
	AEVBO* vbo;
	AEVec2* texcoords;
	unsigned int tbo;
	unsigned char textureUnitCount;
}AEMTVBO;

AEMTVBO* AEMTVBOLoad(const char* filename,int isStatic,int hasNormals,unsigned char textureUnitCount){
	if(filename==NULL){
		AEMTVBO* vbo=calloc(1,sizeof(AEMTVBO));
		vbo->vbo=AEVBOLoad(NULL,isStatic,hasNormals)
		vbo->hasNormals=hasNormals;
		vbo->textureUnitCount=vbo->textureUnitCount;
		return vbo;
	}
	AEMTVBO* vbo=AEMTVBOLoad(NULL,isStatic,hasNormals,textureUnitCount);
	
	
	
	return vbo;
}

void AEMTVBOAdd(AEMTVBO* vbo,AEVBOVertWithNormal* v,AEVec2* auxTexCoords){
	if(vbo==NULL) return;
}

void AEMTVBODraw(AEMTVBO* vbo){
	if(vbo==NULL) return;
	if(vbo->textureUnitCount>1){
		if(vbo->tbo) glBindBuffer(GL_ARRAY_BUFFER,vbo->tbo);
		const int stride=3*sizeof(float);
		const unsigned int offset=(unsigned int)(vbo->vbo?NULL:vbo->verts);
		for(unsigned char i=vbo->textureUnitCount;i--;){
			glClientActiveTexture(GL_TEXTURE0+i);
			glEnableClientState(GL_TEXTURE_COORD_ARRAY);
			glTexCoordPointer(2,GL_FLOAT,sizeof(AEVec2),(void*)offset+i*sizeof(AEVec2));
		}
		
	}
	AEVBODraw(vbo->vbo);
	for(unsigned char i=vbo->textureUnitCount;--i;){
		glClientActiveTexture(GL_TEXTURE0+i);
		glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	}
}

void AEMTVBOCompile(AEMTVBO* vbo,unsigned int* usages){
	if(vbo==NULL) return;
}

void AEMTVBODelete(AEMTVBO* vbo){
	if(vbo==NULL) return;
	AEVBODelete(vbo->vbo);
	free(vbo->texcoords);
	glDeleteBuffers(1,(GLuint*)&vbo->tbo);
	free(vbo);
}